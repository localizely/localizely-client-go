/*
Localizely API

<h2>Getting started</h2><p>Localizely API is built on <a href=\"https://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\">REST</a>. <br>You can use this API for importing & exporting your localization files in order to automate the process with `curl` scripts or external <a href=\"https://en.wikipedia.org/wiki/Continuous_integration\" target=\"_blank\">CI</a> tools. <br>Response is returned in JSON form even in case of error. <br></p><p>If you Authenticate with your API token on this page by clicking \"Authorize\" button, you can make API calls directly from here with \"Try it out\", and generate such `curl` examples. </p><h2>API Authentication</h2><p>Authenticate your account by sending your API token as a request header `X-Api-Token`. <br>The token can be found under <a href=\"https://app.localizely.com/account\" target=\"_blank\">My Profile</a> page. <br>A user must have an Admin role in the project in order to access the project with his token. <br>API requests without authentication will fail.</p><p><b>Base url:</b> `https://api.localizely.com`</p>

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package localizely

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
	"reflect"
)


// UploadAPIAPIService UploadAPIAPI service
type UploadAPIAPIService service

type ApiImportLocalizationFileRequest struct {
	ctx context.Context
	ApiService *UploadAPIAPIService
	projectId string
	langCode *string
	file *os.File
	branch *string
	overwrite *bool
	reviewed *bool
	tagAdded *[]string
	tagUpdated *[]string
	tagRemoved *[]string
}

// Language to upload, specified as language code. e.g. &#x60;en&#x60;, &#x60;en_GB&#x60; or &#x60;en-GB&#x60;
func (r ApiImportLocalizationFileRequest) LangCode(langCode string) ApiImportLocalizationFileRequest {
	r.langCode = &langCode
	return r
}

// Uploading file. Supported following formats: &#x60;Flutter ARB, Android XML, iOS strings, iOS stringsdict, Angular XLF, Gettext PO, Gettext POT, Java properties, Ruby on Rails yaml, .NET resx, flat json, csv, Excel .xlsx, Excel .xls&#x60;
func (r ApiImportLocalizationFileRequest) File(file *os.File) ApiImportLocalizationFileRequest {
	r.file = file
	return r
}

// Name of the branch to upload file into. Only in case of activated branching feature.
func (r ApiImportLocalizationFileRequest) Branch(branch string) ApiImportLocalizationFileRequest {
	r.branch = &branch
	return r
}

// If translation in given language should be overwritten with modified translation from uploading file.
func (r ApiImportLocalizationFileRequest) Overwrite(overwrite bool) ApiImportLocalizationFileRequest {
	r.overwrite = &overwrite
	return r
}

// If uploading translations, that are added, should be marked as Reviewed. For uploading translations that are only modified it will have effect only if &#x60;overwrite&#x60; is set to &#x60;true&#x60;.
func (r ApiImportLocalizationFileRequest) Reviewed(reviewed bool) ApiImportLocalizationFileRequest {
	r.reviewed = &reviewed
	return r
}

// Optional list of tags to add to new translations from uploading file. &lt;br&gt;&lt;br&gt;Multiple tags can be defined in a following way: &#x60;&amp;tag_added_keys&#x3D;NEW&amp;tag_added_keys&#x3D;NEW_SPRINT05&#x60;
func (r ApiImportLocalizationFileRequest) TagAdded(tagAdded []string) ApiImportLocalizationFileRequest {
	r.tagAdded = &tagAdded
	return r
}

// Optional list of tags to add to updated translations from uploading file. &lt;br&gt;&lt;br&gt;Multiple tags can be defined in a following way: &#x60;&amp;tag_updated_keys&#x3D;UPDATED&amp;tag_updated_keys&#x3D;UPDATED_SPRINT05&#x60;
func (r ApiImportLocalizationFileRequest) TagUpdated(tagUpdated []string) ApiImportLocalizationFileRequest {
	r.tagUpdated = &tagUpdated
	return r
}

// Optional list of tags to add to removed translations from uploading file. &lt;br&gt;&lt;br&gt;Multiple tags can be defined in a following way: &#x60;&amp;tag_removed_keys&#x3D;REMOVED&amp;tag_removed_keys&#x3D;REMOVED_SPRINT05&#x60;
func (r ApiImportLocalizationFileRequest) TagRemoved(tagRemoved []string) ApiImportLocalizationFileRequest {
	r.tagRemoved = &tagRemoved
	return r
}

func (r ApiImportLocalizationFileRequest) Execute() (*http.Response, error) {
	return r.ApiService.ImportLocalizationFileExecute(r)
}

/*
ImportLocalizationFile Upload translations for a language

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId Project ID - Can be found on 'My projects' page
 @return ApiImportLocalizationFileRequest
*/
func (a *UploadAPIAPIService) ImportLocalizationFile(ctx context.Context, projectId string) ApiImportLocalizationFileRequest {
	return ApiImportLocalizationFileRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
func (a *UploadAPIAPIService) ImportLocalizationFileExecute(r ApiImportLocalizationFileRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UploadAPIAPIService.ImportLocalizationFile")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/projects/{project_id}/files/upload"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.langCode == nil {
		return nil, reportError("langCode is required and must be specified")
	}
	if r.file == nil {
		return nil, reportError("file is required and must be specified")
	}

	if r.branch != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "branch", r.branch, "form", "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "lang_code", r.langCode, "form", "")
	if r.overwrite != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "overwrite", r.overwrite, "form", "")
	} else {
		var defaultValue bool = false
		r.overwrite = &defaultValue
	}
	if r.reviewed != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "reviewed", r.reviewed, "form", "")
	} else {
		var defaultValue bool = false
		r.reviewed = &defaultValue
	}
	if r.tagAdded != nil {
		t := *r.tagAdded
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag_added", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag_added", t, "form", "multi")
		}
	}
	if r.tagUpdated != nil {
		t := *r.tagUpdated
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag_updated", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag_updated", t, "form", "multi")
		}
	}
	if r.tagRemoved != nil {
		t := *r.tagRemoved
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "tag_removed", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "tag_removed", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var fileLocalVarFormFileName string
	var fileLocalVarFileName     string
	var fileLocalVarFileBytes    []byte

	fileLocalVarFormFileName = "file"
	fileLocalVarFile := r.file

	if fileLocalVarFile != nil {
		fbs, _ := io.ReadAll(fileLocalVarFile)

		fileLocalVarFileBytes = fbs
		fileLocalVarFileName = fileLocalVarFile.Name()
		fileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: fileLocalVarFileBytes, fileName: fileLocalVarFileName, formFileName: fileLocalVarFormFileName})
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["API auth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v InvalidImportFileErrorDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
