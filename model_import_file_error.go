/*
Localizely API

<h2>Getting started</h2><p>Localizely API is built on <a href=\"https://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\">REST</a>. <br>You can use this API for importing & exporting your localization files in order to automate the process with `curl` scripts or external <a href=\"https://en.wikipedia.org/wiki/Continuous_integration\" target=\"_blank\">CI</a> tools. <br>Response is returned in JSON form even in case of error. <br></p><p>If you Authenticate with your API token on this page by clicking \"Authorize\" button, you can make API calls directly from here with \"Try it out\", and generate such `curl` examples. </p><h2>API Authentication</h2><p>Authenticate your account by sending your API token as a request header `X-Api-Token`. <br>The token can be found under <a href=\"https://app.localizely.com/account\" target=\"_blank\">My Profile</a> page. <br>A user must have an Admin role in the project in order to access the project with his token. <br>API requests without authentication will fail.</p><p><b>Base url:</b> `https://api.localizely.com`</p>

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package localizely

import (
	"encoding/json"
)

// checks if the ImportFileError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportFileError{}

// ImportFileError struct for ImportFileError
type ImportFileError struct {
	Line *int32 `json:"line,omitempty"`
	Position *int32 `json:"position,omitempty"`
	ErrorMessage *string `json:"errorMessage,omitempty"`
}

// NewImportFileError instantiates a new ImportFileError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportFileError() *ImportFileError {
	this := ImportFileError{}
	return &this
}

// NewImportFileErrorWithDefaults instantiates a new ImportFileError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportFileErrorWithDefaults() *ImportFileError {
	this := ImportFileError{}
	return &this
}

// GetLine returns the Line field value if set, zero value otherwise.
func (o *ImportFileError) GetLine() int32 {
	if o == nil || IsNil(o.Line) {
		var ret int32
		return ret
	}
	return *o.Line
}

// GetLineOk returns a tuple with the Line field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportFileError) GetLineOk() (*int32, bool) {
	if o == nil || IsNil(o.Line) {
		return nil, false
	}
	return o.Line, true
}

// HasLine returns a boolean if a field has been set.
func (o *ImportFileError) HasLine() bool {
	if o != nil && !IsNil(o.Line) {
		return true
	}

	return false
}

// SetLine gets a reference to the given int32 and assigns it to the Line field.
func (o *ImportFileError) SetLine(v int32) {
	o.Line = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *ImportFileError) GetPosition() int32 {
	if o == nil || IsNil(o.Position) {
		var ret int32
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportFileError) GetPositionOk() (*int32, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *ImportFileError) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given int32 and assigns it to the Position field.
func (o *ImportFileError) SetPosition(v int32) {
	o.Position = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *ImportFileError) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage) {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportFileError) GetErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMessage) {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *ImportFileError) HasErrorMessage() bool {
	if o != nil && !IsNil(o.ErrorMessage) {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *ImportFileError) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

func (o ImportFileError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportFileError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Line) {
		toSerialize["line"] = o.Line
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.ErrorMessage) {
		toSerialize["errorMessage"] = o.ErrorMessage
	}
	return toSerialize, nil
}

type NullableImportFileError struct {
	value *ImportFileError
	isSet bool
}

func (v NullableImportFileError) Get() *ImportFileError {
	return v.value
}

func (v *NullableImportFileError) Set(val *ImportFileError) {
	v.value = val
	v.isSet = true
}

func (v NullableImportFileError) IsSet() bool {
	return v.isSet
}

func (v *NullableImportFileError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportFileError(val *ImportFileError) *NullableImportFileError {
	return &NullableImportFileError{value: val, isSet: true}
}

func (v NullableImportFileError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportFileError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


