/*
Localizely API

<h2>Getting started</h2><p>Localizely API is built on <a href=\"https://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\">REST</a>. <br>You can use this API for importing & exporting your localization files in order to automate the process with `curl` scripts or external <a href=\"https://en.wikipedia.org/wiki/Continuous_integration\" target=\"_blank\">CI</a> tools. <br>Response is returned in JSON form even in case of error. <br></p><p>If you Authenticate with your API token on this page by clicking \"Authorize\" button, you can make API calls directly from here with \"Try it out\", and generate such `curl` examples. </p><h2>API Authentication</h2><p>Authenticate your account by sending your API token as a request header `X-Api-Token`. <br>The token can be found under <a href=\"https://app.localizely.com/account\" target=\"_blank\">My Profile</a> page. <br>A user must have an Admin role in the project in order to access the project with his token. <br>API requests without authentication will fail.</p><p><b>Base url:</b> `https://api.localizely.com`</p>

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package localizely

import (
	"encoding/json"
)

// checks if the InvalidImportFileErrorDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InvalidImportFileErrorDto{}

// InvalidImportFileErrorDto struct for InvalidImportFileErrorDto
type InvalidImportFileErrorDto struct {
	ErrorCode *string `json:"errorCode,omitempty"`
	ErrorMessage *string `json:"errorMessage,omitempty"`
	ErrorData map[string]map[string]interface{} `json:"errorData,omitempty"`
	Errors []ImportFileError `json:"errors,omitempty"`
}

// NewInvalidImportFileErrorDto instantiates a new InvalidImportFileErrorDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInvalidImportFileErrorDto() *InvalidImportFileErrorDto {
	this := InvalidImportFileErrorDto{}
	return &this
}

// NewInvalidImportFileErrorDtoWithDefaults instantiates a new InvalidImportFileErrorDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInvalidImportFileErrorDtoWithDefaults() *InvalidImportFileErrorDto {
	this := InvalidImportFileErrorDto{}
	return &this
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *InvalidImportFileErrorDto) GetErrorCode() string {
	if o == nil || IsNil(o.ErrorCode) {
		var ret string
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvalidImportFileErrorDto) GetErrorCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorCode) {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *InvalidImportFileErrorDto) HasErrorCode() bool {
	if o != nil && !IsNil(o.ErrorCode) {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given string and assigns it to the ErrorCode field.
func (o *InvalidImportFileErrorDto) SetErrorCode(v string) {
	o.ErrorCode = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *InvalidImportFileErrorDto) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage) {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvalidImportFileErrorDto) GetErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMessage) {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *InvalidImportFileErrorDto) HasErrorMessage() bool {
	if o != nil && !IsNil(o.ErrorMessage) {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *InvalidImportFileErrorDto) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetErrorData returns the ErrorData field value if set, zero value otherwise.
func (o *InvalidImportFileErrorDto) GetErrorData() map[string]map[string]interface{} {
	if o == nil || IsNil(o.ErrorData) {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.ErrorData
}

// GetErrorDataOk returns a tuple with the ErrorData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvalidImportFileErrorDto) GetErrorDataOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.ErrorData) {
		return map[string]map[string]interface{}{}, false
	}
	return o.ErrorData, true
}

// HasErrorData returns a boolean if a field has been set.
func (o *InvalidImportFileErrorDto) HasErrorData() bool {
	if o != nil && !IsNil(o.ErrorData) {
		return true
	}

	return false
}

// SetErrorData gets a reference to the given map[string]map[string]interface{} and assigns it to the ErrorData field.
func (o *InvalidImportFileErrorDto) SetErrorData(v map[string]map[string]interface{}) {
	o.ErrorData = v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *InvalidImportFileErrorDto) GetErrors() []ImportFileError {
	if o == nil || IsNil(o.Errors) {
		var ret []ImportFileError
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InvalidImportFileErrorDto) GetErrorsOk() ([]ImportFileError, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *InvalidImportFileErrorDto) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []ImportFileError and assigns it to the Errors field.
func (o *InvalidImportFileErrorDto) SetErrors(v []ImportFileError) {
	o.Errors = v
}

func (o InvalidImportFileErrorDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InvalidImportFileErrorDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ErrorCode) {
		toSerialize["errorCode"] = o.ErrorCode
	}
	if !IsNil(o.ErrorMessage) {
		toSerialize["errorMessage"] = o.ErrorMessage
	}
	if !IsNil(o.ErrorData) {
		toSerialize["errorData"] = o.ErrorData
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	return toSerialize, nil
}

type NullableInvalidImportFileErrorDto struct {
	value *InvalidImportFileErrorDto
	isSet bool
}

func (v NullableInvalidImportFileErrorDto) Get() *InvalidImportFileErrorDto {
	return v.value
}

func (v *NullableInvalidImportFileErrorDto) Set(val *InvalidImportFileErrorDto) {
	v.value = val
	v.isSet = true
}

func (v NullableInvalidImportFileErrorDto) IsSet() bool {
	return v.isSet
}

func (v *NullableInvalidImportFileErrorDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInvalidImportFileErrorDto(val *InvalidImportFileErrorDto) *NullableInvalidImportFileErrorDto {
	return &NullableInvalidImportFileErrorDto{value: val, isSet: true}
}

func (v NullableInvalidImportFileErrorDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInvalidImportFileErrorDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


